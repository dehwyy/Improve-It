generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @unique @default(cuid())
  name               String?
  email              String?         @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  answeredPercentage Int             @default(0)
  answered           Int             @default(0)
  victorySessions    PlaySession[]
  playSessions       Player[]
  correctAnswers     CorrectAnswer[]
}

model PlaySession {
  id              String          @id @unique() @default(cuid())
  difficulty      Difficulty
  mode            Modes
  count           Int
  playDate        DateTime        @default(now())
  playerMode      PlayerModes
  sessionWinnerId String?
  sessionWinner   User?           @relation(fields: [sessionWinnerId], references: [id])
  players         Player[]
  correctAnswers  CorrectAnswer[]
}

model Player {
  id        String      @id @default(cuid())
  sessionId String
  session   PlaySession @relation(fields: [sessionId], references: [id])
  playerId  String?
  player    User?       @relation(fields: [playerId], references: [id])

  @@unique([id, sessionId])
}

model CorrectAnswer {
  id                    String      @id @unique() @default(cuid())
  correctAnsweredUserId String?
  correctAnsweredUser   User?       @relation(fields: [correctAnsweredUserId], references: [id])
  sessionId             String
  session               PlaySession @relation(fields: [sessionId], references: [id])
  time                  Int
}

enum Difficulty {
  Easy
  Medium
  Hard
  Impossible
}

enum Modes {
  Variable
  Multiply
  PlusMinus
}

enum PlayerModes {
  Solo
  Multiplayer
  WithBot
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
